[1,["20g1ukYUVPvKWKBRznAKo+@f9941","fdoJXLgx1GAa2UhGATlj3o","ffuIqPr2JI9I8dPLYGRDpD@f9941","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","b7MFJ8MjNBwqr3fNq1j5dJ@f9941","afxHkx8GZGsJC+n+YfITQo@f9941","20g1ukYUVPvKWKBRznAKo+@6c48a","54TknWPwVPqJqeCR+Y/Czo@6c48a","95EkngnxZFbYuFpsqVTaFr@6c48a","afxHkx8GZGsJC+n+YfITQo@6c48a","b7MFJ8MjNBwqr3fNq1j5dJ@6c48a","609xlc7CpF67qUiVX2DoHQ","ffuIqPr2JI9I8dPLYGRDpD@6c48a"],["node","_spriteFrame","_textureSource","_parent","_customMaterial","_verticalScrollBar","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite","_cameraComponent","item2","item","list2","list","_target","scene","_effectAsset"],["cc.SpriteFrame",["cc.Node",["_name","_layer","_id","_components","_lpos","_parent","_children","_lrot","_euler"],0,9,5,1,2,5,5],["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","_right","_left","_top","_bottom","_alignMode","node","_target"],-5,1,1],["cc.Sprite",["_type","_sizeMode","_fillType","_fillRange","node","_spriteFrame","_color","_customMaterial"],-1,1,6,5,6],["cc.Node",["_name","_layer","_parent","_components","_lpos","_children"],1,1,12,5,2],["cc.UITransform",["node","_contentSize","_anchorPoint"],3,1,5,5],["cc.Button",["_transition","node","_disabledColor","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite","_target"],2,1,5,6,6,6,6,1],["cc.Camera",["_visibility","_projection","_priority","_orthoHeight","_far","_clearFlags","node","_color"],-3,1,5],["cc.SceneAsset",["_name"],2],["cc.Node",["_name","_parent","_components","_lpos"],2,1,2,5],["cc.Canvas",["node","_cameraComponent"],3,1,1],["b387eQgAFtPUI7wDjuC6NKo",["node","list","list2","item","item2"],3,1,1,1,1,1],["cc.Layout",["_resizeMode","_layoutType","_spacingY","_isAlign","node"],-1,1],["cc.Mask",["node"],3,1],["cc.Scene",["_name","_children","_globals"],2,2,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog"],3,4,4,4,4],["cc.AmbientInfo",[],3],["cc.ShadowsInfo",["_shadowColor"],3,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["cc.ScrollView",["bounceDuration","brake","horizontal","node","_content"],0,1,1],["cc.Label",["_string","_actualFontSize","_fontSize","_lineHeight","node","_color","_customMaterial"],-1,1,5,6],["cc.DirectionalLight",["node","_staticSettings"],3,1,4],["cc.StaticLightSettings",[],3],["cc.ScrollBar",["_direction","node","_scrollView","_handle"],2,1,1,1],["cc.EffectAsset",["_name","combinations","shaders","techniques"],-1],["cc.Material",["_props","_defines"],1]],[[5,0,1,1],[5,0,1,2,1],[1,0,1,6,3,4,3],[4,0,1,2,5,3,4,3],[3,0,1,4,5,3],[1,0,1,5,6,3,3],[1,0,1,5,3,4,3],[4,0,1,2,3,4,3],[2,0,4,3,1,8,5],[2,0,2,7,8,4],[2,0,1,2,8,9,4],[3,0,2,1,3,4,6,7,5,5],[3,0,1,4,3],[12,0,1,2,3,4,5],[13,0,1],[20,0,1,2,3,4,4],[21,0,1,2,3,4,5,6,5],[24,0,1,2,3,2],[8,0,2],[1,0,1,2,6,3,4,4],[1,0,2,5,3,7,8,3],[1,0,2,5,3,4,7,8,3],[9,0,1,2,3,2],[10,0,1,1],[2,0,5,6,8,4],[2,0,3,1,2,8,5],[2,0,4,1,2,8,5],[11,0,1,2,3,4,1],[6,0,1,2,7,3,4,5,6,2],[6,0,1,2,3,4,5,6,2],[14,0,1,2,2],[15,0,1,2,3,1],[16,1],[17,0,1],[18,1],[19,1],[22,0,1,1],[23,1],[7,0,6,2],[7,1,2,3,4,5,0,6,7,7],[25,0,1,2,3,5],[26,0,1,3]],[[[[18,"scene"],[19,"Canvas",33554432,"9aMMOox7hNKLp1T3CcoeGk",[-10,-11,-12],[[0,-1,[5,960,640]],[23,-3,-2],[24,45,5.684341886080802e-14,5.684341886080802e-14,-4],[27,-9,-8,-7,-6,-5]],[1,480,320.00000000000006,0]],[3,"list",33554432,1,[-17,-18],[[[0,-13,[5,480,640]],[4,1,0,-14,8],-15,[25,45,480,240,250,-16]],4,4,1,4],[1,-240,0,0]],[3,"list2",33554432,1,[-23,-24],[[[0,-19,[5,480,640]],[4,1,0,-20,17],-21,[26,45,480,240,250,-22]],4,4,1,4],[1,240,0,0]],[2,"item2",33554432,[-30],[[0,-25,[5,540,60]],[11,1,1,0,1,-26,[4,4287401105],11,12],[28,2,-28,[4,4284308831],-27,13,14,15,16],[8,40,50,50,131.33,-29]],[1,0,-30,0]],[2,"item",33554432,[-35],[[0,-31,[5,540,60]],[11,1,1,0,1,-32,[4,4287401105],2,3],[29,2,-33,[4,4284308831],4,5,6,7],[8,40,50,50,131.33,-34]],[1,0,-30,0]],[3,"scrollBar",33554432,2,[-40],[[[1,-36,[5,12,640],[0,1,0.5]],[4,1,0,-37,0],[9,37,250,1,-38],-39],4,4,4,1],[1,240,0,0]],[3,"scrollBar",33554432,3,[-45],[[[1,-41,[5,12,640],[0,1,0.5]],[4,1,0,-42,9],[9,37,250,1,-43],-44],4,4,4,1],[1,240,0,0]],[2,"content",33554432,[5],[[1,-46,[5,640,60],[0,0.5,1]],[13,1,2,10,true,-47]],[1,0,480,0]],[5,"view",41943040,2,[8],[[0,-48,[5,480,640]],[14,-49],[10,45,240,250,-50,2]]],[2,"content",33554432,[4],[[1,-51,[5,640,60],[0,0.5,1]],[13,1,2,10,true,-52]],[1,0,480,0]],[5,"view",41943040,3,[10],[[0,-53,[5,480,640]],[14,-54],[10,45,240,250,-55,3]]],[30,"scene",[-56,-57,1],[31,[32],[33,[4,4283190348]],[34],[35]]],[7,"bar",33554432,6,[[[1,-58,[5,10,156.25],[0,0,0]],-59],4,1],[1,-11,-31.25,0]],[15,0.23,0.75,false,2,8],[6,"Label",33554432,5,[[0,-60,[5,0,37.8]],[16,"",30,30,0,-61,[4,4278190080],1]],[1,15.087,-0.001000000000000334,0]],[7,"bar",33554432,7,[[[1,-62,[5,10,156.25],[0,0,0]],-63],4,1],[1,-11,-31.25,0]],[15,0.23,0.75,false,3,10],[6,"Label",33554432,4,[[0,-64,[5,0,37.8]],[16,"",30,30,0,-65,[4,4278190080],10]],[1,15.087,-0.001000000000000334,0]],[20,"Main Light","c0y6F5f+pAvI805TdmxIjx",12,[[36,-66,[37]]],[3,-0.24999999999999997,-0.24999999999999997,-0.06698729810778066,0.9330127018922194],[1,-30,-30,0]],[21,"Main Camera","c9DMICJLFO5IeO07EPon7U",12,[[38,1822425087,-67]],[1,-10,10,10],[3,-0.27781593346944056,-0.36497167621709875,-0.11507512748638377,0.8811195706053617],[1,-35,-45,0]],[22,"Camera",1,[-68],[1,0,0,1000]],[39,0,1073741824,320,2000,6,41943040,21,[4,4278190080]],[12,1,0,13],[17,1,6,14,23],[12,1,0,16],[17,1,7,17,25]],0,[0,0,1,0,10,22,0,0,1,0,0,1,0,11,4,0,12,5,0,13,17,0,14,14,0,0,1,0,-1,21,0,-2,2,0,-3,3,0,0,2,0,0,2,0,-3,14,0,0,2,0,-1,6,0,-2,9,0,0,3,0,0,3,0,-3,17,0,0,3,0,-1,7,0,-2,11,0,0,4,0,0,4,0,15,4,0,0,4,0,0,4,0,-1,18,0,0,5,0,0,5,0,0,5,0,0,5,0,-1,15,0,0,6,0,0,6,0,0,6,0,-4,24,0,-1,13,0,0,7,0,0,7,0,0,7,0,-4,26,0,-1,16,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,0,11,0,-1,19,0,-2,20,0,0,13,0,-2,23,0,0,15,0,0,15,0,0,16,0,-2,25,0,0,18,0,0,18,0,0,19,0,0,20,0,-1,22,0,16,12,1,3,12,4,3,10,5,3,8,8,3,9,10,3,11,14,5,24,17,5,26,68],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,25],[1,4,4,1,6,7,8,9,1,1,4,4,1,6,7,8,9,1,1,1],[2,1,1,0,0,0,3,4,5,2,1,1,0,0,0,3,4,5,6,6]],[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"20835ba4-6145-4fbc-a58a-051ce700aa3e@6c48a","packable":true}],[0],0,[0],[2],[7]],[[{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"544e49d6-3f05-4fa8-9a9e-091f98fc2ce8@6c48a","packable":true}],[0],0,[0],[2],[8]],[[[40,"builtin-sprite",[{}],[{"hash":1559944983,"name":"builtin-sprite|sprite-vs:vert|sprite-fs:frag","glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\n#if SAMPLE_FROM_RT\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 color;\nlayout(location = 1) out vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(location = 0) in vec4 color;\n#if USE_TEXTURE\n  layout(location = 1) in vec2 uv0;\n  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\n#if SAMPLE_FROM_RT\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":46,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":1}},"defines":[{"name":"USE_LOCAL","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean","defines":[]},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"IS_GRAY","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":1,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":2,"defines":[]}],"varyings":[{"name":"color","type":16,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"uv0","type":14,"count":1,"stageFlags":1,"location":1,"defines":[]}]}],[{"passes":[{"program":"builtin-sprite|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"951249e0-9f16-456d-8b85-a6ca954da16b@6c48a","packable":true}],[0],0,[0],[2],[9]],[[{"name":"default_scrollbar_vertical","rect":{"x":0,"y":0,"width":15,"height":30},"offset":{"x":0,"y":0},"originalSize":{"width":15,"height":30},"rotated":false,"capInsets":[4,10,4,10],"texture":"afc47931-f066-46b0-90be-9fe61f213428@6c48a","packable":true}],[0],0,[0],[2],[10]],[[{"name":"default_panel","rect":{"x":0,"y":0,"width":20,"height":20},"offset":{"x":0,"y":0},"originalSize":{"width":20,"height":20},"rotated":false,"capInsets":[8,8,8,8],"texture":"b730527c-3233-41c2-aaf7-7cdab58f9749@6c48a","packable":true}],[0],0,[0],[2],[11]],[[[41,[{}],[{"USE_TEXTURE":true}]]],0,0,[0],[17],[12]],[[{"name":"default_scrollbar_vertical_bg","rect":{"x":0,"y":0,"width":15,"height":30},"offset":{"x":0,"y":0},"originalSize":{"width":15,"height":30},"rotated":false,"capInsets":[4,10,4,10],"texture":"ffb88a8f-af62-48f4-8f1d-3cb606443a43@6c48a","packable":true}],[0],0,[0],[2],[13]]]]
